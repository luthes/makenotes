#!/bin/bash

# Initialize variables as empty. Some will have default values, such as directory.
# I wouldn't change too many of these, maybe the directory if you want.
# It'd be cool if we could upload to Google Drive, S3, or something.
DATE=$(date "+%Y%m%d%H%M%S")
DIRECTORY=~/Notes/
SUBJECT=''
TOPIC=''
SYNC=''
BROWSE=''
FIND=''
FILE=''
JOT=''
REPO='https://github.com/luthes/makenotes/'
HELP=$'mn - make notes - Steven Luther
Arguments:
  -s: subject (Required)
  -t: topic (Required)
  -g: git sync
    - Be careful with this, it will push everything the directory.
  -d: list notes in directory
  -e: edit file if its created
  -b: Browse directory
  -f: find in notes titles and contents
  -j: quick jot to $DIR/jots/
  -l: execute tree on ~/Notes directory'

create_notes() {
# Create the notes files and directories.
  if [ -z $SUBJECT ] || [ -z $TOPIC ]
  then
    echo 'Creating notes requires both the -s and -t arguments.'
  else
    mkdir -p ~/Notes/$SUBJECT
    FILE=~/Notes/$SUBJECT/$TOPIC-$DATE.md
    touch $FILE
    echo $"# $SUBJECT -- $TOPIC -- $DATE
----------

" >> $FILE
    echo "Created file: $FILE" 
  fi
}

list_directory() {
# This should list the Notes directory in the terminal
# I don't like this. Even if ti would work, it's cluttery. I might user tree.
# I haven't decided yet.
  for i in $(ls -lsa)
  do 
    echo $i
    ls -lsa $i
  done
}

browse() {
#This opensVim on the default directory top level directory so we can browse, and select which file we want to edit.
  $EDITOR $DIRECTORY
}

sync() {
# Sync the files to github.
  if [ ! -d "$DIRECTORY/.git/" ]
  then
    echo 'Initializing directory...'
    git clone $REPO $DIRECTORY
  else
    (cd $DIRECTORY
      git pull origin master
      git add *
      git commit -m 'Automated Sync'
      git push origin master
      )
  fi
}

edit() {
  $EDITOR $(find ~/Notes -type f -print0 | xargs -0 stat --format '%Y :%y %n' | sort -nr | cut -d: -f2- | head | awk '{ print $4 }')
}

jot() {
  # This could be nicer.
  printf "Jotting $STRING to $FILE"
  mkdir -p $DIRECTORY/jots/
  touch $DIRECTORY/jots/$DATE-jot
  echo $JOT >> $DIRECTORY/jots/$DATE-jot
}

get_jots() {
  printf "Getting all jots"
  for i in $(find $DIRECTORY);
  do 
    echo "Jot $i\n"
    cat $i
  done
}

find_notes() {
  # Find Matching Titles
  echo 'Matched File Titles: '
  find $DIRECTORY -not -path '/\.*' -type f -name $FIND

  # Find Matching Strings
  echo 'Matching content: '
  grep -rn --exclude-dir='.*' --exclude '.*' $FIND $DIRECTORY
}

# Show help if no options passed
if [[ ! $@ =~ ^\-.+ ]]
then
  echo "$HELP"
fi

#Do things for arguments
while getopts ":s:t:gdbf:jel" opt; do
  case $opt in
    s)
      # Subject
      SUBJECT=$OPTARG
      ;;
    t)
      #Topic
      TOPIC=$OPTARG
      create_notes
      ;;
    g)
      #Sync
      SYNC=$OPTARG
      sync
      ;;
    d)
      #Directory
      DIRECTORY=$OPTARG
      list_directory    
      ;;
    e)
      #Bool - Edit file immediately.
      edit
      ;;
    b)
      #Browse with Vim
      BROWSE=$OPTARG
      browse
      ;;
    f)
      #find
      FIND=$OPTARG
      find_notes
      ;;
    l)
      #list notes
      tree ~/Notes
      ;;
    j)
      #jots
      JOT=$OPTARG
      jot
      ;;
    *)
      echo "$HELP"
      ;;
  esac
done
